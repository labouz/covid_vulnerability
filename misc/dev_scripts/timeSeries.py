###############################################################################
# Time Series Analysis
# Author: Group 1
# Date: 2022-03-12
# Description: This script uses our time series data to do some analyses and forcast burden.
#################################################################################

# import libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# from sklearn.metrics import r2_score, median_absolute_error, mean_absolute_error
# from sklearn.metrics import median_absolute_error, mean_squared_error, mean_squared_log_error

from scipy.optimize import minimize
import statsmodels.tsa.api as smt
import statsmodels.api as sm

# from tqdm import tqdm_notebook

from itertools import product
import warnings
warnings.filterwarnings('ignore')

# %matplotlib inline

# define MAE function
def mabserr(y_true, y_pred):
    return np.mean(np.abs(y_true - y_pred))

# define MAPE function
def mean_absolute_percentage_error(y_true, y_pred):
    return np.mean(np.abs((y_true - y_pred) / y_true)) * 100

# read in data
analysis_df = pd.read_csv("../data/final_df.csv")

# convert date to datetime
analysis_df['date'] = pd.to_datetime(analysis_df['date']) 

# create dataframe that is the average of all columns - grouped by date and state
analysis_df_all = analysis_df.groupby(['date']).mean().reset_index()

# plot adult_icu_bed_utilization over time
plt.figure(figsize=(20, 8))
plt.plot(analysis_df_all['date'], analysis_df_all['adult_icu_bed_utilization'], label='adult_icu_bed_utilization')
plt.title('Utilization of Adult ICU Beds')
plt.ylabel('Percentage of ICU Beds Used')
plt.xlabel('Date')
plt.grid(False)
plt.show()

# observe: this is not very stationary 

# Modeling ------------------------------------------------------------

# looking at just the adult_icu_bed_utilization, create new df with date as index
icu_bu_df = analysis_df_all[['date', 'adult_icu_bed_utilization']]
icu_bu_df = icu_bu_df.set_index('date')

# Smooth using moving average - naive approach
def plot_move_avg(series, window, plot_intervals = False, scale = 1.96):
    
    rolling_mean = series.rolling(window=window).mean()
    plt.figure(figsize=(17,8))
    plt.title('Moving average\n window size = {}'.format(window))
    plt.plot(rolling_mean, 'g', label='Rolling mean trend')
    
    #Plot confidence intervals for smoothed values
    if plot_intervals:
        mae = mabserr(series[window:], rolling_mean[window:])
        deviation = np.std(series[window:] - rolling_mean[window:])
        lower_bound = rolling_mean - (mae + scale * deviation)
        upper_bound = rolling_mean + (mae + scale * deviation)
        plt.plot(upper_bound, 'r--', label='Upper bound / Lower bound')
        plt.plot(lower_bound, 'r--')
        
    plt.plot(series[window:], label='Actual values')
    # plt.plot(df['date'], df[col+'_ma'], label='moving average')
    plt.legend(loc='best')
    plt.ylabel('Adult ICU Bed Utilization')
    plt.xlabel('Date')  
    plt.grid(False)
    plt.show()

# smooth for the previous 7 days - week
plot_move_avg(icu_bu_df.adult_icu_bed_utilization, window=7)

# smooth over the previous 14 days
plot_move_avg(icu_bu_df.adult_icu_bed_utilization, 14)

# smooth over 7 days with intervals
plot_move_avg(icu_bu_df.adult_icu_bed_utilization, 7, True)

# COMMENTS: there is a downward trend in the data which could suggest states will be unburdedned

# apply dickey fuller test to see if the data is stationary
def dickey_fuller_test(y, lags = None):
    
    if not isinstance(y, pd.Series):
        y = pd.Series(y)
        
    # perform dickey fuller test
    p_value = sm.tsa.stattools.adfuller(y)[1]
    # print out results
    # print('Dickey-Fuller test:')
    # print('p-value: ' + str(p_value[1]))
    # print('Critical Values:')
    # for key, value in p_value[4].items():
    #     print('\t' + key + ': ' + str(value))
    
    # plot results
    plt.figure(figsize=(20, 8))
    plt.plot(y)
    plt.title('Time Series Analysis Plots\n Dickey-Fuller: p={0:.5f}'.format(p_value))
    
    # plot autocorrelation and partial autocorrelation
    smt.graphics.plot_acf(y, lags=lags, alpha=0.05)
    smt.graphics.plot_pacf(y, lags=lags, alpha=0.05)
    
    plt.tight_layout()
    plt.xlabel('Date')
    plt.grid(False)
    plt.show()
    
# test for stationarity
dickey_fuller_test(icu_bu_df.adult_icu_bed_utilization, lags=30)

# COMMENTS:
# p-values is >0.05, so the data is not stationary
# the data is unsurprisngly non-stationary and there is very high autocorrelation
# get rid of the high autocorrelation
# subtract the time series from iteself with a lag of 1

# Take the first difference to remove to make the process stationary
icu_bu_df_diff = icu_bu_df - icu_bu_df.shift(1)

# dickey_fuller_test(icu_bu_df_diff[1:], lags = 30)
