AL_ = hosp_df[(hosp_df['state'] == 'AL')]
AL_var = ['inpatient_bed_covid_utilization',
          'adult_icu_bed_utilization', 
         'deaths_covid']
AL_.index = AL_['date']
AL_ = AL_[AL_var]
    
AL_mean = np.mean(AL_)#['adult_icu_bed_utilization'])
AL_stdev = np.std(AL_)#['adult_icu_bed_utilization'])

#AL_std = (AL_['adult_icu_bed_utilization'] - AL_mean) / AL_stdev
AL_std = (AL_ - AL_mean) / AL_stdev
AL_std


# Plot AL adult_icu_bed_utilization timeline
def plot_series(ts, ylabel, legend = True):
    
    fig = plt.figure(figsize = (12,6))
    
    for col in ts.columns:
        plt.plot(ts.index, ts[col], label=col, linewidth=1)
        
    plt.ylabel(ylabel, fontsize = 15)
    plt.xlabel("Date", fontsize = 15)
    if legend:
        plt.legend()
        
    return fig

plot_series(AL_, 'Alabama Standardized values')

def detrend_weekly(ts):
    
    #--- Your code starts here
    # dow =
    ts = ts.copy()
    for i in range(7):
        ts[i::7] = ts[i::7] / ts[i::7].agg('mean')

    #--- Your code ends here
    
    return(ts)

detrend_weekly(AL_)

fig = plot_series(detrend_weekly(AL_), "Alabama Standardized values detrended")

def smooth(series, r = 1):
    
    columns = series.columns
    index = series.index
    ts = series.to_numpy()
    
    if r:
        ts = ts.copy()
        smooth_ts = pd.DataFrame(ts, columns=columns, index=index)
        for i in range(ts.shape[0]):
            for j in range(ts.shape[1]):
                if i < r:
                    smooth_ts.iloc[i, j] = np.mean(ts[0:(i+r), j])
                elif i + r > series.shape[0]:
                    smooth_ts.iloc[i, j] = np.mean(ts[(i-r):, j])
                else:
                    smooth_ts.iloc[i, j] = np.mean(ts[i-r:(i+r)+1, j])
                
        return smooth_ts
    else:
        return series

fig = plot_series(smooth(AL_, r = 10), "Alabama Standardized variables detrended & smoothed")